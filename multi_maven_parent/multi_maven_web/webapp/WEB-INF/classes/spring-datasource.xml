<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
		
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/db.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">
		<property name="driverClassName" value="${jdbc.mysql.driver}" />
		<property name="url"
			value="${jdbc.mysql.url}" />
		<property name="username" value="${jdbc.mysql.username}" />
		<property name="password" value="${jdbc.mysql.password}" />
		<property name="filters" value="${filters}"/>
		<!--最大并发连接数-->
		<property name="maxActive" value="${maxActive}" />
		<!--初始化连接数量-->
		<property name="initialSize" value="${initialSize}"/>
		<!--配置获取连接等待超时的时间-->
		<property name="maxWait" value="${maxWait}"/>
		<!--最小空闲连接数-->
		<property name="minIdle" value="${minIdle}"/>
		<!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
		<!--配置一个连接在池中最小生存的时间，单位是毫秒-->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
		<property name="validationQuery" value="${validationQuery}"/>
		<property name="testWhileIdle" value="${testWhileIdle}"/>
		<property name="testOnBorrow" value="${testOnBorrow}"/>
		<property name="testOnReturn" value="${testOnReturn}"/>
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}"/>
		<!--打开removeAbandoned功能-->
		<property name="removeAbandoned" value="${removeAbandoned}"/>
		<!--1800秒，也就是30分钟-->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
		<!--关闭abanded连接时输出错误日志-->
		<property name="logAbandoned" value="${logAbandoned}"/>
	</bean>
	
	 <!-- MyBatis配置 -->
    	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件-->
		<property name="mapperLocations" value="classpath*:mybatis/*.xml"></property>
		<property name="typeAliasesPackage" value="com.jty.entity" />  
	</bean>
	<!-- dao层的扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jty.dao" />
	</bean>
	
    
    
    <!-- 配置事务管理器 -->
	<bean id="mysqlTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--  拦截器方式配置事务 -->
	<tx:advice id="mysqlTransactionAdvice" transaction-manager="mysqlTransactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="mysqlTransactionPointcut" expression="execution(* com.jty.service.*.*(..))" />
		<aop:advisor pointcut-ref="mysqlTransactionPointcut" advice-ref="mysqlTransactionAdvice" />
	</aop:config>
	<tx:annotation-driven transaction-manager="mysqlTransactionManager" proxy-target-class="true" />
	
	
</beans>